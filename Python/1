from time import time
from random import Random, random
from input_handler import get_N_from_user, get_starting_positions_from_user

class Chromosome:
	def __init__(self, N, parent=None):
		r = Random()
		if parent==None: self._value = [r.randint(0,N-1) for i in range(N)]
		else: 
			self._value = self.crossover(parent[0],parent[1])
			self.mutate()
		self._fitness = self.fitness()

	def fitness(self):
		return

	def crossover(self, parent1, parent2):
		split_index = Random().randint(0,N-1)
		l,r = parent1._value[:split_index],parent2._value[split_index:]
		l.extend(r)
		return l

	def mutate(self):
		r = Random()
		if r.random() < MUTATION_RATE:
			new_int = r.randint(0,N-1)
			index = r.randint(0,N-1)
			self._value[index] = new_int
		return 

	def print_chromosome(self):
		print self._value
	
def has_reached_termination_criteria():
	return False

def get_next_population(population,N):
	return

def generate_initial_population(starting_positions):
	return [Chromosome(2) for i in range(8)]
	


if __name__ == "__main__":
	MUTATION_RATE = 0.03
	pop_size = 100
	solutions = []
	
	N = 8 
	starting_positions, rows_set = [0,6,3,5,2,2,3,1], set([4,7])

	t = 0
	population = generate_initial_population(starting_positions)
	while (has_reached_termination_criteria() == False):
		break










	

	




